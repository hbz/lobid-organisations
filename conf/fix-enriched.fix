## <?xml version="1.0" encoding="UTF-8"?>
## <!-- Copyright 2014-2016, hbz. Licensed under the Eclipse Public License 1.0 -->
## 
## <metamorph xmlns="http://www.culturegraph.org/metamorph"
## 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1"
## 	entityMarker=".">
## 	<macros>
## 		<!-- url and provides: Handle urls without http:// or https:// and remove blanks -->
## 		<macro name="url-group">
## 			<group name="$[group_name]">
## 				<choose>
## 					<data source="$[dbs_field]">
## 						<regexp match="http(.*)" />
## 						<replace pattern="\s+" with=""/>
## 					</data>
## 					<data source="$[dbs_field]">
## 						<regexp match="(www(.*))" format="http://${1}"/>
## 						<replace pattern="\s+" with=""/>
## 					</data>
## 					<combine value="${hp}" name="$[group_name]" sameEntity="true" flushWith="009Q.z" reset="true">
## 						<if>
## 							<data source="009Q.z">
## 								<equals string="$[sigel_code]" />
## 							</data>
## 						</if>
## 						<choose sameEntity="true" flushWith="009Q.z" reset="true">
## 							<data source="009Q.u" name="hp">
## 								<regexp match="http(.*)" />
## 								<replace pattern="\s+" with=""/>
## 							</data>
## 							<data source="009Q.u" name="hp">
## 								<regexp match="(www(.*))" format=""http://${1}"/>
## 								<replace pattern="\s+" with=""/>
## 							</data>
## 						</choose>
## 					</combine>
## 				</choose>
## 			</group>
## 		</macro>
#
#		
#
## 		<macro name="make-id">
## 			<choose>
## 				<data source="$[isil-field]" name="$[output-name]">
## 					<regexp match="(.*)" format="$[uri-base]" />
## 				</data>
## 				<data source="$[dbs-field]" name="$[output-name]">
## 					<lookup in="$[dbs-lookup]" />
## 				</data>
## 			</choose>
## 		</macro>
#
#
## 	</macros>
#
## 	<maps>
# <filemap name="isil2wikidata_map"
# 	files="https://raw.githubusercontent.com/hbz/lookup-tables/master/data/isil2wikidata.csv" />
# <filemap name="libtype_map"
# 	files="https://raw.githubusercontent.com/hbz/lookup-tables/master/data/libtype-map.csv"/>
# <filemap name="ags_map"
# 	files="https://raw.githubusercontent.com/hbz/lookup-tables/master/data/plz-ags-map.csv" />
# <filemap name="rs_map"
# 	files="https://raw.githubusercontent.com/hbz/lookup-tables/master/data/ags-rs-map.csv" />
# <filemap name="geonames_map"
#	files="https://raw.githubusercontent.com/hbz/lookup-tables/master/data/geonames-map.csv" />
## 		<filemap name="plz_blacklist" files="plz-blacklist.csv" />
do once("mapsAndMacros")
	put_filemap("conf/isil2wikidata.csv","isil2wikidata_map", sep_char:"\t")
	put_filemap("conf/libtype-map.csv","libtype_map", sep_char:"\t")
	put_filemap("conf/plz-ags-map.csv","ags_map", sep_char:"\t")		
	put_filemap("conf/ags-rs-map.csv","rs_map", sep_char:"\t")		
	put_filemap("conf/geonames-map.csv","geonames_map", sep_char:"\t")	
	put_filemap("conf/plz-blacklist.csv","plz_blacklist", sep_char:"\t")						
	put_rdfmap("https://raw.githubusercontent.com/hbz/lobid-vocabs/master/fundertype.ttl","funderType_id_to_value_map",target:"skos:prefLabel", select_language:"de")
	put_rdfmap("https://raw.githubusercontent.com/hbz/lobid-vocabs/master/fundertype.ttl","funderType_id_to_value_en_map",target:"skos:prefLabel", select_language:"en")
	put_rdfmap("https://raw.githubusercontent.com/hbz/lobid-vocabs/master/libtype.ttl","libtype_id_to_value_map",target:"skos:prefLabel", select_language:"de")   
	put_rdfmap("https://raw.githubusercontent.com/hbz/lobid-vocabs/master/libtype.ttl","libtype_id_to_value_en_map",target:"skos:prefLabel", select_language:"en")
	put_rdfmap("https://raw.githubusercontent.com/hbz/lobid-vocabs/master/stocksize.ttl","stocksize_id_to_value_map",target:"skos:prefLabel", select_language:"de")
	put_rdfmap("https://raw.githubusercontent.com/hbz/lobid-vocabs/master/stocksize.ttl","stocksize_id_to_value_en_map",target:"skos:prefLabel", select_language:"en")
 	put_map("dbs_funderType_value_to_id_map", # values of dbs are not the same as the skos:notations
			"1":"http://purl.org/lobid/fundertype#n01" ,
			"2":"http://purl.org/lobid/fundertype#n02" ,
			"3":"http://purl.org/lobid/fundertype#n03" ,
			"4":"http://purl.org/lobid/fundertype#n04" ,
			"5":"http://purl.org/lobid/fundertype#n06" ,
			"6":"http://purl.org/lobid/fundertype#n07" ,
			"7":"http://purl.org/lobid/fundertype#n08" ,
			"8":"http://purl.org/lobid/fundertype#n09" ,
			"9":"http://purl.org/lobid/fundertype#n10" ,
			"10":"http://purl.org/lobid/fundertype#n11",
			"11":"http://purl.org/lobid/fundertype#n12",
			"12":"http://purl.org/lobid/fundertype#n13"
	)
	put_map("dbs_stocksize_value_to_id_map", # values of dbs are not the same as the skos:notations
			"1":"http://purl.org/lobid/stocksize#n01" ,
			"2":"http://purl.org/lobid/stocksize#n02" ,
			"3":"http://purl.org/lobid/stocksize#n03" ,
			"4":"http://purl.org/lobid/stocksize#n04" ,
			"5":"http://purl.org/lobid/stocksize#n05" ,
			"6":"http://purl.org/lobid/stocksize#n06" ,
			"7":"http://purl.org/lobid/stocksize#n07" ,
			"8":"http://purl.org/lobid/stocksize#n08" ,
			"9":"http://purl.org/lobid/stocksize#n09" ,
			"10":"http://purl.org/lobid/stocksize#n10",
			"11":"http://purl.org/lobid/stocksize#n11"
	)
	put_map("dbs_libtype_value_to_id_map", # values of dbs are not the same as the skos:notations
			"11":"http://purl.org/lobid/libtype#n11",
			"15":"http://purl.org/lobid/libtype#n15",
			"21":"http://purl.org/lobid/libtype#n21",
			"30":"http://purl.org/lobid/libtype#n33",
			"51":"http://purl.org/lobid/libtype#n33",
			"52":"http://purl.org/lobid/libtype#n33",
			"53":"http://purl.org/lobid/libtype#n36",
			"54":"http://purl.org/lobid/libtype#n33",
			"55":"http://purl.org/lobid/libtype#n36",
			"56":"http://purl.org/lobid/libtype#n33",
			"58":"http://purl.org/lobid/libtype#n36",
			"59":"http://purl.org/lobid/libtype#n33",
			"60":"http://purl.org/lobid/libtype#n60",
			"70":"http://purl.org/lobid/libtype#n70",
			"80":"http://purl.org/lobid/libtype#n81",
			"91":"http://purl.org/lobid/libtype#n91"
	)
	do put_macro("url-group")
		if any_match("$[dbs_field]","http(.*)")
			copy_field("$[dbs_field]","@url-group")
		elsif any_match("$[dbs_field]","(www(.*))")
			copy_field("$[dbs_field]","@url-group")
			replace_all("@url-group","(www(.*))","http://$1")
		elsif exists("009Q")
			do list(path:"009Q","var":"$i")
				if any_equal("$i.z","$[sigel_code]")
					if any_match("$i.u","http(.*)")
						copy_field("$i.u","@url-group")
					elsif any_match("$i.u","(www(.*))")
						copy_field("$i.u","@url-group")
						replace_all("@url-group","(www(.*))","http://$1")
					end
				end
			end
		end
		replace_all("@url-group","\\s+","")
		move_field("@url-group","$[group_name]")
	end

	do put_macro("make-id")
		if exists("$[isil-field]")
			copy_field("$[isil-field]","$[output-name]")
			replace_all("$[output-name]","^(.*)$","$[uri-base]")
		else
			copy_field("$[dbs-field]","$[output-name]")
			lookup("$[output-name]","$[dbs-lookup]", delete:"true")
		end
	end
end
#
## 	<rules>
## 		<choose name="@postalCodeForLookups">
## 			<data source="plz"/>
## 			<data source="postalCodeVisitor"/>
## 			<data source="postalCodeMail"/>
## 			<data source="postalCodeOther"/>
## 		</choose>
#
if exists("plz")
	copy_field("plz","@postalCodeForLookups")
elsif exists("postalCodeVisitor")
	copy_field("postalCodeVisitor","@postalCodeForLookups")
elsif exists("postalCodeMail")
	copy_field("postalCodeMail","@postalCodeForLookups")
elsif exists("postalCodeOther")
	copy_field("postalCodeOther","@postalCodeForLookups")
end
#
## TODO: What is nam?
## 		<data source="nam|029A.a" name="\@context">
## 			<constant value="http://lobid.org/organisations/context.jsonld" />
## 		</data>		
add_field("@context","http://lobid.org/organisations/context.jsonld")
#
## 		<combine name="type" value="${typeurl}">
## 			<data source="nam|029A.a" name="type" />
## 			<choose>
## 				<data source="035E.f" name="typeurl">
## 					<lookup in="libtype_map" />
## 				</data>
## 				<data source="nam" name="typeurl">
## 					<constant value="Library" />
## 				</data>
## 			</choose>
## 		</combine>
#
#
copy_field("035E.f","@libType")
lookup("@libType","libtype_map", delete:"true")
if exists("@libType")
	copy_field("@libType","type")
else
	add_field("type","Library")
end
#
#
## 		<choose name="rs">
## 			<data source="gvz_id">
## 				<regexp match="\d{12}" />
## 			</data>
## 			<data source="gvz_id">
## 				<regexp match="(\d{11})" format="0${1}"/>
## 			</data>
## 			<data source="032P.n">
## 				<lookup in="rs_map" />
## 			</data>
## 			<data source="@postalCodeForLookups">
## 				<blacklist map="plz_blacklist"/>
## 				<lookup in="ags_map" />
## 				<lookup in="rs_map" />
## 			</data>
## 		</choose>
#
## TODO: No blacklist exists.
#
if any_match("gvz_id","\\d{11,12}")
	copy_field("gvz_id","@rs")
	replace_all("@rs","^(\\d{11})$","0$1")
elsif exists("032P.n")
	copy_field("032P.n","@rs")
else
	copy_field("@postalCodeForLookups","@rs")
	## TODO: No blacklist exists in fix:			<blacklist map="plz_blacklist"/> TODO: Perhaps mit emty element lookup?
	lookup("@rs","plz_blacklist")
	if any_equal("@rs","blacklist")
		remove_field("@rs")
	else
		lookup("@rs","ags_map", delete:"true")
	end
end

lookup("@rs","rs_map")
copy_field("@rs","rs")
## 		
## 		<group name="name">
## 			<choose>
## 				<data source="nam" />
## 				<data source="029A.a">
## 					<!-- sanitize entries like "Ruhr-Universita\u0308t Bochum,\n\t\t\t\t\tUniversita\u0308tsbibliothek" -->
## 					<replace pattern="\t|\n|\(\s\)\s+" with="" />
## 				</data>
## 			</choose>
## 		</group>
#
if exists("nam")
	copy_field("nam","name")
else
	copy_field("029A.a","@name")
	# 					<!-- sanitize entries like "Ruhr-Universita\u0308t Bochum,\n\t\t\t\t\tUniversita\u0308tsbibliothek" -->
	replace_all("@name","\\t|\\n|\\(\\s\\)\\s+","")
	copy_field("@name","name")
end
#
## 		
call_macro ("url-group", group_name:"url", dbs_field:"url", sigel_code:"A")
call_macro ("url-group", group_name:"provides", dbs_field:"opac", sigel_code:"B")
## 
#
#
#
## 		<!-- API descriptions, see #421 -->
## 		<combine name="@serviceUrl" value="${a}" sameEntity="true" reset="true" flushWith="009Q.z" >
## 			<data source="009Q.x">
## 				<not-equals string="Weitere Informationen"/>
## 				<not-equals string="Weitere Information"/>
## 			</data>
## 			<data source="009Q.u" name="a">
## 				<regexp match="http(.*)"/>
## 				<replace pattern="\s+" with=""/>
## 			</data>
## 			<data source="009Q.z">
## 				<equals string="W"/>
## 			</data>
## 		</combine>
## 
## 		<entity name="availableChannel[]" flushWith="record">
## 			<entity name="" flushWith="@serviceUrl" reset="true">
## 				<if>
## 					<all reset="true">
## 						<data source="009Q.x">
## 							<not-equals string="Weitere Informationen"/>
## 							<not-equals string="Weitere Information"/>
## 						</data>
## 					</all>
## 				</if>
## 				<data name="serviceType" source="009Q.x" />
## 				<entity name="type[]" flushWith="@serviceUrl" reset="true" >
## 					<data name="type" source="009Q.x">
## 						<constant value="ServiceChannel"/>
## 					</data>
## 					<data name="type" source="009Q.x">
## 						<regexp match="(SRU)|(DAIA)|(PAIA)|(OpenURL)" />
## 						<constant value="WebAPI"/>
## 					</data>
## 				</entity>
## 				<data source="@serviceUrl" name="serviceUrl" />
## 			</entity>
## 		</entity>
#
set_array("availableChannel[]")

do list (path: "009Q","var":"$i")
	unless any_contain("$i.x","Information")
		if any_equal("$i.z","W")
			set_array("availableChannel[].$append.type[]","ServiceChannel")
			if any_match("$i.x",".*(SRU|DAIA|PAIA|OpenURL).*")
				add_field("availableChannel[].$last.type[].$append","WebAPI")
			end
			copy_field("$i.x","availableChannel[].$last.serviceType")
			if any_match("$i.u","http(.*)")
				copy_field("$i.u","availableChannel[].$last.serviceUrl")
			end
		end
	end
end
#
## 
## 		<data source="isil" name="isil"/>
## keep isil
#
## 		<data source="inr" name="dbsID"/>
copy_field("inr","dbsID")
#
## 		<!-- new-id: isil if available or Pseudo-isil for DBS data that lack isil-->
## 		<choose>
## 			<data source="isil" name="id">
## 				<regexp match="(.*)" format="http://lobid.org/organisations/${1}#!" />
## 			</data>
## 			<combine name="id" value="http://lobid.org/organisations/DBS-${inr}#!">
## 				<data source="inr" name="inr">
## 					<not-equals string="NULL" />
## 				</data>
## 			</combine>
## 		</choose>
if exists("isil")
	paste("id","~http://lobid.org/organisations/","isil","~#!",join_char:"")
elsif exists("inr")
	unless any_equal("inr","NULL")
		paste("id","~http://lobid.org/organisations/DBS-","inr","~#!",join_char:"")
	end
end
#
## 		
## 		<!-- Telephone and email -->
## 		<choose>	
## 			<combine value="00${countryCode} ${prefix} ${phonenr}" name="telephone" sameEntity="true">
## 				<data source="countryCode" name="countryCode" />
## 				<data source="prefix" name="prefix" />
## 				<data source="phone" name="phonenr" />
## 			</combine>
## 		</choose>
## 		<choose>
## 			<data source="email" name="email">
## 				<regexp match="(.*)" format="mailto:${1}" />
## 			</data>
## 		</choose>
#
if exists ("phonenr")
	paste("telephone","~00","contryCode","prefix","phonenr")
end
if exists("email")
	paste("email","~mailto:","email", join_char:"")
end
#
## 		<!-- Mailing address -->
## 		<entity name="address" flushWith="record">
## 			<data source="streetAddressMail" name="streetAddress" />
## 			<data source="postOfficeBoxNumber" name="postOfficeBoxNumber" />
## 			<data source="localityMail" name="addressLocality" />
## 			<data source="postalCodeMail" name="postalCode" />
## 			<data source="countryMail" name="addressCountry"/>
## 			<data source="localityMail" name="type">
## 				<constant value="PostalAddress" />
## 			</data>
## 		</entity>
#
copy_field("streetAddressMail","address.streetAddress")
copy_field("postOfficeBoxNumber","address.postOfficeBoxNumber")
copy_field("localityMail","address.addressLocality")
copy_field("postalCodeMail","address.postalCode")
copy_field("countryMail","address.addressCountry")
if exists("address")
	add_field("address.type","PostalAddress")
end
## 		
## 		<!-- Lookup fields for visitor and other address -->
## 		<combine name="@geoLookupDbs" value="${strasse}_${plz}_${ort}_${land}" flushWith="record">
## 			<if>
## 				<all>
## 					<data source="addressCountry"> <not-equals string=""/> </data>
## 					<data source="strasse"> <not-equals string=""/> </data>
## 					<data source="ort"> <not-equals string=""/> </data>
## 					<data source="plz"> <not-equals string=""/> </data>
## 				</all>
## 			</if>
## 			<data source="addressCountry" name="land"/>
## 			<data source="strasse" name="strasse" />
## 			<data source="ort" name="ort" />
## 			<data source="plz" name="plz" />
## 		</combine>	
#
paste("@geoLookupDbs","strasse","plz","ort","addressCountry",join_char:"_")
#
#
## 		
## 		<!-- Locations -->
## 		<entity name="location[]" flushWith="record">
set_array("location[]")
#
## 			<entity name="place" flushWith="record">
## 				<data source="localityVisitor|strasse" name="type">
## 					<regexp match="(.*)" format="Place" />
## 				</data>
#

## 				<entity name="address" flushWith="record">
## 					<choose>
## 						<data source="streetAddressVisitor" name="streetAddress" />
## 						<data source="strasse" name="streetAddress">
## 							<not-equals string="NULL"/>
## 						</data>
if exists("streetAddressVisitor")
	add_field("location[].$append.type","Place")
	copy_field("streetAddressVisitor","location[].$last.address.streetAddress")
elsif exists("strasse")
	unless any_equal("strasse","NULL")
		add_field("location[].$append.type","Place")
		copy_field("strasse","location[].$last.address.streetAddress")
	end
end
## 					</choose>

## 				<data source="descriptionVisitor" name="description"/>
copy_field("descriptionVisitor","location[].$last.description")

## 					<choose>
## 						<data source="localityVisitor" name="addressLocality" />
## 						<data source="ort" name="addressLocality" />
## 					</choose>
## 					<choose>
## 						<data source="localityVisitor" name="type">
## 							<constant value="PostalAddress" />
## 						</data>
## 						<data source="strasse" name="type">
## 							<not-equals string="NULL"/>
## 							<constant value="PostalAddress" />
## 						</data>
## 					</choose>
#
if exists("localityVisitor")
	copy_field("localityVisitor","location[].$last.address.addressLocality")
	add_field("location[].$last.address.type","PostalAddress")
elsif exists("ort") 
	unless any_equal("ort","NULL")
		copy_field("ort","location[].$last.address.addressLocality")
		add_field("location[].$last.address.type","PostalAddress")
	end
end
#
## 					<data source="postalCodeVisitor" name="postalCode" />
## 					<data source="plz" name="postalCode" />
#
	if exists("postalCodeVisitor")
		copy_field("postalCodeVisitor","location[].$last.address.postalCode")
	elsif exists("plz")
		unless any_equal("plz","NULL")
			copy_field("plz","location[].$last.address.postalCode")
		end
	end
## 					<choose>
## 						<data source="countryVisitor" name="addressCountry"/>
## 						<data source="addressCountry" name="addressCountry"/>
## 					</choose>
if exists("countryVisitor")
	copy_field("countryVisitor","location[].$last.address.addressCountry")
else
	unless any_equal("addressCountry","NULL")
		copy_field("addressCountry","location[].$last.address.addressCountry")
	end
end
#
#
#
## 				</entity>
## 				<entity name="openingHoursSpecification" flushWith="record">
## 					<data source="openingHoursVisitor|oef" name="type">
## 						<constant value="OpeningHoursSpecification" />
## 					</data>
#
## 					<choose>
## 						<data source="openingHoursVisitor" name="description" />
## 						<data source="oeffnungszeiten" name="description" />
## 					</choose>
if exists("openingHoursVisitor")
	copy_field("openingHoursVisitor","location[].$last.openingHoursSpecification.description")
	add_field("location[].$last.openingHoursSpecification.type","OpeningHoursSpecification")
elsif exists("oeffnungszeiten")
	unless any_equal("oeffnungszeiten","NULL")
		copy_field("oeffnungszeiten","location[].$last.openingHoursSpecification.description")
		add_field("location[].$last.openingHoursSpecification.type","OpeningHoursSpecification")
	end
end
#
#
## 					<data source="openingCommentVisitor" name="comment" />
copy_field("openingCommentVisitor","location[].$last.openingHoursSpecification.comment")
#
## 				</entity>
## 				<entity name="geo" flushWith="record">
## 					<choose>
## 						<data source="latDbs" name="lat" /> <!-- dbs verzeichnis -->
## 						<data source="latVisitor" name="lat" /> <!-- zdb sigel verzeichnis -->
## 						<data source="@geoLookupDbs" name="lat"> <!-- geo lookup pelias -->
## 							<lookup in="addLatMap" />
## 						</data>
## 					</choose>
if exists("latDbs")
	copy_field("latDbs","location[].$last.geo.lat")
elsif exists("latVisitor")
	copy_field("latVisitor","location[].$last.geo.lat")
elsif exists("@geoLookupDbs")
	lookup("@geoLookupDbs","addLatMap", delete:"true")
	copy_field("@geoLookupDbs","location[].$last.geo.lat")
end
#
## 					<choose>
## 						<data source="lonDbs" name="lon" />
## 						<data source="lonVisitor" name="lon" />
## 						<data source="@geoLookupDbs" name="lon">
## 							<lookup in="addLongMap" />
## 						</data>
## 					</choose>
#
if exists("lonDbs")
	copy_field("lonDbs","location[].$last.geo.lon")
elsif exists("lonVisitor")
	copy_field("lonVisitor","location[].$last.geo.lon")
elsif exists("@geoLookupDbs")
	lookup("@geoLookupDbs","addlongMap" , delete:"true")
	copy_field("@geoLookupDbs","location[].$last.geo.lon")
end
#
## 				</entity>
## 			</entity>
## 			<entity name="place" flushWith="record">
## 				<data source="localityOther" name="type">
## 					<regexp match="(.*)" format="Place" />
## 				</data>				
#
## 				<data source="descriptionOther" name="description"/>
copy_field("descriptionOther","@otherLocation.description")
## 				<entity name="address" flushWith="record">
## 					<data source="streetAddressOther" name="streetAddress" />
copy_field("streetAddressOther","@otherLocation.address.streetAddress")
#
## 					<data source="localityOther" name="addressLocality" />
copy_field("localityOther","@otherLocation.address.addressLocality")
## 					<data source="postalCodeOther" name="postalCode" />
copy_field("postalCodeOther","@otherLocation.address.postalCode")
## 					<data source="countryOther" name="addressCountry" />
copy_field("countryOther","@otherLocation.address.addressCountry")
## 					<data source="localityOther" name="type">
## 						<constant value="PostalAddress" />
## 					</data>
## 				</entity>
## 				<entity name="openingHoursSpecification" flushWith="record">
## 					<data source="openingHoursOther" name="type">
## 						<constant value="OpeningHoursSpecification" />
## 					</data>						

#
## 					<data source="openingHoursOther" name="description" />
copy_field("countryOther","@otherLocation.openingHoursSpecification.description")
## 					<data source="openingCommentOther" name="comment" />
## 				</entity>
## 				<!-- combine field for look in coordinate maps -->
## 				<entity name="geo" flushWith="record">
## 					<choose>
## 						<data source="latOther" name="lat" />
## 					</choose>
copy_field("latOther","@otherLocation.geo.lat")
## 					<choose>
## 						<data source="lonOther" name="lon" />
## 					</choose>
copy_field("lonOther","@otherLocation.geo.lon")
## 				</entity>
## 			</entity>
## 		</entity>
## 
if exists("@otherLocation")
	add_field("@otherLocation.address.type","PostalAddress")
	add_field("@otherLocation.place.type","Place")
	add_field("@otherLocation.openingHoursSpecification.type","OpeningHoursSpecification")
end

copy_field("@otherLocation","location[].$append")


## 		<!-- Determine classification, funderType, and stocksize ID, loop back '@' -->
## 		<call-macro name="make-id" isil-field="035E.f" dbs-field="typ_id" dbs-lookup="dbs_libtype_value_to_id_map"
## 			uri-base="http://purl.org/lobid/libtype#n$1" output-name="@classificationId"/>
## 		<call-macro name="make-id" isil-field="035E.g" dbs-field="utr_id" dbs-lookup="dbs_funderType_value_to_id_map"
## 			uri-base="http://purl.org/lobid/fundertype#n${1}" output-name="@funderTypeId"/>
## 		<call-macro name="make-id" isil-field="035E.h" dbs-field="bestandsgroessenklasse_id" dbs-lookup="dbs_stocksize_value_to_id_map"
## 			uri-base="http://purl.org/lobid/stocksize#n${1}" output-name="@stocksizeId"/>

call_macro("make-id", "isil-field":"035E.f", "dbs-field":"typ_id", "dbs-lookup":"dbs_libtype_value_to_id_map", "uri-base":"http://purl.org/lobid/libtype#n$1","output-name":"@classificationId")
call_macro("make-id", "isil-field":"035E.g", "dbs-field":"utr_id", "dbs-lookup":"dbs_funderType_value_to_id_map", "uri-base":"http://purl.org/lobid/fundertype#n$1","output-name":"@funderTypeId")
call_macro("make-id", "isil-field":"035E.h", "dbs-field":"bestandsgroessenklasse_id", "dbs-lookup":"dbs_stocksize_value_to_id_map", "uri-base":"http://purl.org/lobid/stocksize#n$1","output-name":"@stocksizeId")

## 		<!-- Use classification, funderType, and stocksize ID for labels -->
## 		<entity name="classification" flushWith="record">
## 			<data source="@classificationId" name="id"/>
## 			<data source="@classificationId" name="type">
## 				<constant value="Concept" />
## 			</data>
## 			<entity name="label" flushWith="record">
## 				<data source="@classificationId" name="de">
## 					<lookup in="libtype_id_to_value_map" />
## 				</data>
## 				<data source="@classificationId" name="en">
## 					<lookup in="libtype_id_to_value_en_map" />
## 				</data>
## 			</entity>
## 		</entity>
#
do list(path:"@classificationId","var":"$i")
	copy_field("$i","classification.id")
	add_field("classification.type","Concept")
	copy_field("$i","classification.label.de")
	copy_field("$i","classification.label.en")
end
lookup("classification.label.de","libtype_id_to_value_map")
lookup("classification.label.en","libtype_id_to_value_en_map")

#
## 
## 		<entity name="funderType" flushWith="record">
## 			<data source="@funderTypeId" name="id"/>
## 			<data source="@funderTypeId" name="type">
## 				<constant value="Concept" />
## 			</data>
## 			<entity name="label" flushWith="record">
## 				<data source="@funderTypeId" name="de">
## 					<lookup in="funderType_id_to_value_map" />
## 				</data>
## 				<data source="@funderTypeId" name="en">
## 					<lookup in="funderType_id_to_value_en_map" />
## 				</data>
## 			</entity>
## 		</entity>
#
do list(path:"@funderTypeId","var":"$i")
	copy_field("$i","funderType.id")
	add_field("funderType.type","Concept")
	copy_field("$i","funderType.label.de")
	copy_field("$i","funderType.label.en")
end

lookup("funderType.label.de","funderType_id_to_value_map" )
lookup("funderType.label.en","funderType_id_to_value_en_map")
#
#
## 
## 		<entity name="collects" flushWith="record">
## 			<data name="type" source="@stocksizeId">
## 				<constant value="Collection"/>
## 			</data>
## 			<entity name="extent" flushWith="record">
## 				<data source="@stocksizeId" name="id"/>
## 				<data source="@stocksizeId" name="type">
## 					<constant value="Concept" />
## 				</data>
## 				<entity name="label" flushWith="record">
## 					<data source="@stocksizeId" name="de">
## 						<lookup in="stocksize_id_to_value_map" />
## 					</data>
## 					<data source="@stocksizeId" name="en">
## 						<lookup in="stocksize_id_to_value_en_map" />
## 					</data>
## 				</entity>
## 			</entity>
## 			<entity name="subject[]" flushWith="record">
## 				<data source="035G.a" name="subject" />
## 			</entity>
## 		</entity>
#
do list(path:"@stocksizeId","var":"$i")
	copy_field("$i","collects.id")
	add_field("collects.type","Collection")
	copy_field("$i","collects.label.de")
	copy_field("$i","collects.label.en")
end
lookup("collects.label.de","stocksize_id_to_value_map" )
lookup("collects.label.en","stocksize_id_to_value_en_map")

set_array("collects.subject[]")
do list(path:"035G","var":"$i")
	copy_field("$i.a","collects.subject[].$append")
end
#
#
## 
## 		<data source="isil" name="@wikidataMap">
## 			<compose prefix='"' postfix='"'/>
## 			<lookup in="isil2wikidata_map" />
## 		</data>
copy_field("isil","@wikidataMap")
prepend("@wikidataMap",'"')
append("@wikidataMap",'"')
lookup ("@wikidataMap","isil2wikidata_map",delete:"true")
##
## 		<entity name="alternateName[]" flushWith="record">
## 			<combine name="${code}" value="${label}" sameEntity="true" reset="true">
## 				<if><data source="029@.4"><not-equals string="d"/></data></if>
## 				<data source="029@.a" name="label"/>
## 				<data source="029@.4" name="code"/>
## 			</combine>
## 		</entity>
## 		<combine name="name_en" value="${label}" sameEntity="true" reset="true">
## 			<if><data source="029@.4"><equals string="d"/></data></if>
## 			<data source="029@.a" name="label"/>
## 		</combine>
set_array("alternateName[]")
do list(path:"029@","var":"$i")
	if any_equal("$i.4","d")
		copy_field("$i.a","name_en")
	else
		copy_field("$i.a","alternateName[].$append")
	end
end
#
#
#
## 		<entity name="sameAs[]" flushWith="record">
set_array("sameAs[]")
#
## 			<combine name="sameAs" value="${wikidataQid}">
## 				<data source="@wikidataMap" name="wikidataQid">
## 					<occurrence only="1" />
## 				</data>
## 			</combine>
copy_field("@wikidataMap","sameAs[].$append")
#
## 			<data source="isil" name="sameAs">
## 				<regexp match="(.*)"
## 					format="http://ld.zdb-services.de/resource/organisations/${1}" />
## 				<occurrence only="1" />
## 			</data>
if exists("isil")
	paste("sameAs[].$append","~http://ld.zdb-services.de/resource/organisations/","isil",join_char:"" )
end
#
## 		</entity>
## 		
## 		<!-- Prepare "Gemeindeschlüssel" for lookup in geonames map and "ags" -->
## 		<choose>
## 			<data source="gemeindekennzahl" name="@ags">
## 				<regexp match="(\d{5})(\d{4})(\d{3})" format="${1}${3}" />
## 			</data>
## 			<data source="gemeindekennzahl" name="@ags">
## 				<regexp match="(\d{4})(\d{4})(\d{3})" format="${1}${3}" />
## 			</data>
if any_match("gemeindekennzahl","\\d{11,12}")
	copy_field("gemeindekennzahl","@ags")
	replace_all("@ags","^(\\d{11})$","0$1")
	replace_all("@ags","(\\d{5})(\\d{4})(\\d{3})","$1$3")

## 			<data source="032P.n" name="@ags">
## 				<regexp match="0(\d{7})" format="${1}" />
## 			</data>
## 			<data source="032P.n" name="@ags">
## 				<regexp match="\d{8}" />
## 			</data>
elsif any_match("032P.n","\\d{8}")
	copy_field("032P.n","@ags")
	replace_all("@ags","^0(.*)$","$1")

#	 			<data source="@postalCodeForLookups" name="@ags">
## 				<blacklist map="plz_blacklist"/>
## 				<lookup in="ags_map" />
## 			</data>
## 		</choose>
else
	copy_field("@postalCodeForLookups","@ags")
	## TODO: No blacklist exists in fix:			<blacklist map="plz_blacklist"/> TODO: Perhaps mit emty element lookup?
	lookup("@ags","plz_blacklist")
	if any_equal("@ags","blacklist")
		remove_field("@ags")
	else
		lookup("@ags","ags_map", delete:"true")
	end
end
#
#
##
## 		<combine name="containedIn" value="http://sws.geonames.org/${geoname}/">
## 			<data source="@ags" name="geoname">
## 				<lookup in="geonames_map" />
## 			</data>
## 		</combine>
lookup("@ags","geonames_map", delete:"true")
if exists("@ags")
	paste("containedIn","http://sws.geonames.org/","@ags")
end
#
#
#
## 
## 		<!-- Entities with id and label for 'linkedTo' -->
do list(path: "035I","var":"$i")
## 		<entity name="linkedTo" >
## 			<data source="035I.c" name="id">
## 				<regexp match="(?i).*gbv" format="http://lobid.org/organisations/DE-601#!" />
## 			</data>
## 			<data source="035I.c" name="label">
## 				<regexp match="(?i).*gbv" format="Verbundzentrale des GBV (VZG)"/>
## 			</data>
## 		</entity>
	if any_contain("$i.c","gbv")
		add_field("linkedTo.id","http://lobid.org/organisations/DE-601#!")
		add_field("linkedTo.label","Verbundzentrale des GBV (VZG)")
		# 		<entity name="linkedTo">
## 			<data source="035I.c" name="id">
## 				<regexp match="(?i).*bvb" format="http://lobid.org/organisations/DE-604#!" />
## 			</data>
## 			<data source="035I.c" name="label">
## 				<regexp match="(?i).*bvb" format="Bibliotheksverbund Bayern"/>
## 			</data>
## 		</entity>
	elsif  any_contain("$i.c","bvb")
		add_field("linkedTo.id","http://lobid.org/organisations/DE-604#!")
		add_field("linkedTo.label","Bibliotheksverbund Bayern (BVB)")



## 		<entity name="linkedTo">
## 			<data source="035I.c" name="id">
## 				<regexp match="(?i).*hebis" format="http://lobid.org/organisations/DE-603#!" />
## 			</data>
## 			<data source="035I.c" name="label">
## 				<regexp match="(?i).*hebis" format="Hessisches BibliotheksInformationsSystem HeBIS" />
## 			</data>
## 		</entity>
#	elsif  any_contain("$i.c","hebis")
		add_field("linkedTo.id","http://lobid.org/organisations/DE-603#!")
		add_field("linkedTo.label","Hessisches BibliotheksInformationsSystem HeBIS")


## 		<entity name="linkedTo">
## 			<data source="035I.c" name="id">
## 				<regexp match="(?i).*hbz" format="http://lobid.org/organisations/DE-605#!" />
## 			</data>
## 			<data source="035I.c" name="label">
## 				<regexp match="(?i).*hbz" format="Hochschulbibliothekszentrum des Landes Nordrhein-Westfalen (hbz)" />
## 			</data>
## 		</entity>
	elsif  any_contain("$i.c","hbz")
		add_field("linkedTo.id","http://lobid.org/organisations/DE-605#!")
		add_field("linkedTo.label","Hochschulbibliothekszentrum des Landes Nordrhein-Westfalen (hbz)")

## 		<entity name="linkedTo">
## 			<data source="035I.c" name="id">
## 				<regexp match="(?i).*kobv" format="http://lobid.org/organisations/DE-602#!" />
## 			</data>
## 			<data source="035I.c" name="label">
## 				<regexp match="(?i).*kobv" format="Kooperativer Bibliotheksverbund Berlin-Brandenburg" />
## 			</data>
## 		</entity>
	elsif  any_contain("$i.c","kobv")
		add_field("linkedTo.id","http://lobid.org/organisations/DE-602#!")
		add_field("linkedTo.label","Kooperativer Bibliotheksverbund Berlin-Brandenburg")

## 		<entity name="linkedTo">
## 			<data source="035I.c" name="id">
## 				<regexp match="(?i).*swb" format="http://lobid.org/organisations/DE-576#!" />
## 			</data>
## 			<data source="035I.c" name="label">
## 				<regexp match="(?i).*swb" format="Bibliotheksservice-Zentrum Baden-Württemberg (BSZ)" />
## 			</data>
## 		</entity>
	elsif  any_contain("$i.c","swb")
		add_field("linkedTo.id","http://lobid.org/organisations/DE-576#!")
		add_field("linkedTo.label","Bibliotheksservice-Zentrum Baden-Württemberg (BSZ)")
	end
end

## 		<entity name="mainEntityOfPage">
## 			<data source="isil" name="id">
## 				<regexp match="(.*)" format="http://lobid.org/organisations/${1}" />
## 			</data>
## 			<data source="001A.0" name="dateCreated">
## 				<replace pattern="^.+?:" with="" />
## 			</data>
## 			<data source="001B.0" name="dateModified">
## 				<replace pattern="^.+?:" with="" />
## 			</data>
## 		</entity>
## 	</rules>
#
copy_field("id","mainEntityOfPage.id")
copy_field("001A.0","mainEntityOfPage.dateCreated")
copy_field("001B.0","mainEntityOfPage.dateModified")

replace_all("mainEntityOfPage.dateCreated","^.+?:","")
replace_all("mainEntityOfPage.dateCreated","^.+?:","")
#
#
## </metamorph>
## 
#

vacuum()

retain(
	"address",
	"alternateName[]",
	"availableChannel[]",
	"classification",
	"collects",
	"containedIn",
	"dbsID",
	"email",
	"funderType",
	"id",
	"isil",
	"location[]",
	"linkedTo",
	"mainEntityOfPage",
	"name",
	"name_en",
	"provides",
	"rs",
	"sameAs[]",
	"telephone",
	"type",
	"url"
	)
